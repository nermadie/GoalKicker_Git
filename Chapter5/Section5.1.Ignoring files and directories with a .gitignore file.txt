CHAPTER 5: Ignoring Files and Folders
SECTION 5.1:

Ta có thể bỏ qua một vài file và thư mục để mặc định không bị tracking bởi git bằng .gitignore file

.gitignore căn bản chứa những file và thư mục được sinh ra trong quá trình build và runtime. .gitignore thường chứa:
  + temporary resources
  + local configuration
  + files containing secret information
.gitignore sẽ áp dụng cho toàn bộ các file mà cùng chung thư mục cũng như recursively cho các file và thư mục con chứa trong các thư mục này
**Nếu .gitignore chứa trong thư mục con thì các file và thư mục ở top level sẽ không được áp dụng

Khi mà file hoặc thư mục được ignored, nó sẽ:
  - Không bị track bởi git
  - Không được report bởi command git status hoặc git diff
  - Không được staged khi gọi git add .

.gitignore được viết trên glob file patterns

gitignore có thể được autogen qua tool:
https://www.toptal.com/developers/gitignore

1 Cách khác để ignore file và folder:
  -Bth thì .gitignore sẽ được commit chung với các file khác. Nếu muốn ignore một vài file mà không phải tạo .gitignore, ta có vài option:
    + Edit file .git/info/exclude file (sử dụng cú pháp tương tự .gitignore). Rule sẽ được áp dụng trong phạm vi repo đó.
    + Setup 1 global .gitignore mà sẽ apply cho toàn bộ repo
  -Ngoài ra, thì có thể ignore local changes để track file mà không phải thay đổi global git configuration bằng:
    + git update-index --skip-worktree [<file>...]
    --> Cho những thay đổi nhỏ
    + git update-index --assume-unchanged [<file>...]
    --> ...
    Đọc thêm:
      https://git-scm.com/docs/git-update-index
      https://stackoverflow.com/questions/13630849/git-difference-between-assume-unchanged-and-skip-worktree/13631525#13631525

Xoá files đã bị ignored:
 -Sử dụng git clean:
  + git clean -Xn #Xem danh sách các files đang bị ignored
  + git clean -Xf #Xoá những files vừa mới displayed
  + Những options có thể sử dụng với git clean:
    -> -d: Mặc định những folder sẽ không được liệt kê trong git clean thì khi thêm -d sẽ có thể xoá cả folder(recursively xoá cả bên trong thư mục)
    -> -f/--force: git clean không cho phép xoá ngay mà khi muốn xoá phải thêm -f vào.
    -> -i/--interactive: clean với interactive mode
    -> -n/--dry-run: Show danh sách sẽ bị remove nếu sử dụng git clean <options>
    -> -q/--quiet: Im lặng, không đưa ra thông báo xoá files thành công mà chỉ đưa ra những files xoá đi bị lỗi
    -> -e <pattern>/--exclude=<pattern>: Sử dụng trường hợp ngoại lệ để loại 1 vài file không mong muốn bị xoá đi theo rule giống như gitignore
    -> -x: Không sử dụng ignore rule như bình thường (tuy nhiên vẫn sử dụng rule nếu có -e đi kèm). -x sẽ bao gồm những file untracked, sử dụng tương tự git restore hoặc git reset để xoá đi những file sinh ra trong quá trình build
    -> -X: Chỉ xoá những files bị ignored bới git.
  **Lưu ý:+ git clean chỉ đọc đến những folder đã được commit tức nếu tạo 1 folder/file mới lồng trong folder mới khác thì git clean sẽ không show ra được mà chỉ show ra thư mục mới ngoài cùng
